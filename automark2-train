#! /usr/bin/env python
import pathlib
import sys

import pytorch_lightning as pl
import torchvision
import torch
import wandb


import mel.rotomap.moles
import mel.lib.common
import mel.rotomap.detectmolesnn


def main():
    data_path = pathlib.Path("/Volumes/angelos-mel/angelos_mel/rotomaps/parts")
    assert data_path.exists()
    d = mel.rotomap.moles.RotomapDirectory(
        data_path / "LeftArm/Upper/2017_04_19/"
    )
    f = next(d.yield_frames())
    i = f.load_image()

    mask = f.load_mask()

    image_height, image_width = i.shape[0:2]
    image = mel.rotomap.detectmolesnn.locations_image(
        f.moles, image_width, image_height
    )

    model = mel.rotomap.detectmolesnn.CackModel()
    to_tensor = torchvision.transforms.ToTensor()

    wandb.finish()
    wandb_logger = pl.loggers.WandbLogger(
        project="mel-automark2",
        name="dense_1cyclelr_600epochs_075lr_defaultdiv_defaultanneal_blur64",
    )
    wandb_logger.watch(model, log="all")
    data = model.images_to_data(i, mask)
    train_dl = torch.utils.data.DataLoader(
        [(data, to_tensor(image))], batch_size=1
    )
    trainer = pl.Trainer(
        max_epochs=model.epochs,
        logger=wandb_logger,
    )

    trainer.fit(model, train_dl)

    model.eval()

    # Save output image.
    # result = model(data.unsqueeze(0))
    # plt.imshow(result.detach().numpy()[0][0])

    wandb.finish()


if __name__ == "__main__":
    sys.exit(main())
