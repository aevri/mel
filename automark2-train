#! /usr/bin/env python
"""Train 'automark2'."""

import argparse
import json
import pathlib
import sys

import pytorch_lightning as pl
import wandb


import mel.rotomap.moles
import mel.lib.common
import mel.rotomap.detectmolesnn


def load_raw_data():
    data_path = pathlib.Path("/Volumes/angelos-mel/angelos_mel/rotomaps/parts")
    assert data_path.exists()
    rotomap_directory = mel.rotomap.moles.RotomapDirectory(
        data_path / "LeftArm/Upper/2017_04_19/"
    )
    frame = next(rotomap_directory.yield_frames())
    photo = frame.load_image()

    mask = frame.load_mask()

    image_height, image_width = photo.shape[0:2]
    locations_image = mel.rotomap.detectmolesnn.locations_image(
        frame.moles, image_width, image_height
    )

    return photo, mask, locations_image


def main():
    argparse.ArgumentParser().parse_args()

    experiment_name = (
        "dense_1cyclelr_600epochs_075lr_defaultdiv_defaultanneal_blur64"
    )

    # Import this as lazily as possible as it takes a while to import, so that
    # we only pay the import cost when we use it.
    import torch
    import torchvision

    melroot = mel.lib.fs.find_melroot()
    model_dir = melroot / mel.lib.fs.DEFAULT_CLASSIFIER_PATH
    model_path = model_dir / "automark2.pth"
    metadata_path = model_dir / "automark2.json"
    print(f"Will save to {model_path}")
    print(f"         and {metadata_path}")

    photo, mask, locations_image = load_raw_data()
    to_tensor = torchvision.transforms.ToTensor()

    model = mel.rotomap.detectmolesnn.CackModel()

    wandb_logger = pl.loggers.WandbLogger(
        project="mel-automark2", name=experiment_name
    )
    wandb_logger.watch(model, log="all")

    data_x = model.images_to_data(photo, mask)
    data_y = to_tensor(locations_image)
    train_dl = torch.utils.data.DataLoader([(data_x, data_y)], batch_size=1)

    trainer = pl.Trainer(
        max_epochs=model.epochs,
        logger=wandb_logger,
    )

    metadata = {}

    trainer.fit(model, train_dl)

    torch.save(model.state_dict(), model_path)
    wandb.finish()

    print(f"Saved {model_path}")
    with open(metadata_path, "w") as f:
        json.dump(metadata, f)
        print(f"Saved {metadata_path}")


if __name__ == "__main__":
    sys.exit(main())
