[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mel"
dynamic = ["version"]
description = "Mole Evolution Laboratory"
authors = [
    {name = "Angelos Evripiotis"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
dependencies = [
    "colorama",
    "opencv-python",
    "pandas",
    "pygame",
    "pytorch-lightning",
    "torch",
    "torchvision",
    "tqdm",
    "wandb",
]

[project.optional-dependencies]
dev = [
    "docformatter",
    "pyright",
    "pytest",
    "ruff",
    "vulture",
]

[project.scripts]
mel = "mel.cmd.mel:main"
mel-debug = "mel.cmddebug.meldebug:main"

[project.urls]
Homepage = "https://github.com/aevri/mel"
Repository = "https://github.com/aevri/mel"

[tool.setuptools]
packages = [
    "mel",
    "mel.cmd",
    "mel.cmddebug",
    "mel.lib",
    "mel.micro",
    "mel.rotomap",
]
zip-safe = false

[tool.setuptools.dynamic]
version = {attr = "mel.__version__"}

[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
# Rule codes enabled for static analysis:
# - A: flake8-builtins (prevent shadowing built-ins)
# - B: flake8-bugbear (likely bugs and design problems)
# - C4: flake8-comprehensions (better list/set/dict comprehensions)
# - FURB: refurb (modernize Python code)
# - N: pep8-naming (naming conventions)
# - PLE: pylint errors (subset of pylint)
# - I: isort (import sorting and organization)
# - W: pycodestyle warnings (whitespace and formatting issues)
# - F: pyflakes (unused imports, variables, undefined names)
# - PIE: flake8-pie (miscellaneous lints and performance improvements)
# - Q: flake8-quotes (enforce consistent quote style)
# - T10: flake8-debugger (detect debugger imports like pdb)
# - ISC: flake8-implicit-str-concat (implicit string concatenation issues)
# - RET: flake8-return (return statement improvements)
# - SIM: flake8-simplify (code simplification opportunities)
# - UP: pyupgrade (upgrade Python syntax for newer versions)
# - RUF: ruff-specific (ruff-specific linting rules)
# - PT: flake8-pytest-style (pytest style improvements)
extend-select = ["A", "B", "C4", "FURB", "N", "PLE", "I", "W", "F", "PIE", "Q", "T10", "ISC", "RET", "SIM", "UP", "RUF", "PT"]

[tool.vulture]
ignore_names = ["training_step", "validation_step", "configure_optimizers"]
exclude = ["*__t.py", "mel/rotomap/detectmoles.py", "mel/rotomap/identifynn.py"]

[tool.pyright]
# Minimal strictness configuration
pythonVersion = "3.12"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true
reportMissingTypeStubs = "none"

# Targeted ignores for specific complex issues
# Ignore pandas sort_values compatibility issues
ignore = [
    "mel/cmd/timelog.py"
]

# Ignore OpenCV attribute access issues (cv2.SimpleBlobDetector_* etc.)
# These are dynamic attributes that pyright cannot resolve
reportAttributeAccessIssue = "none"

# Ignore PyTorch tensor indexing and complex ML model type issues
# These require significant architectural changes to fix properly
reportArgumentType = "none"

# Ignore complex PyTorch DataLoader/Dataset generic type issues
reportCallIssue = "none"

# Keep these enabled to catch real bugs:
# - reportGeneralTypeIssues = "warning" (catch None iteration, etc.)
# - reportOptionalSubscript = "warning" (catch None subscripting)
reportGeneralTypeIssues = "warning"
reportOptionalSubscript = "warning"
